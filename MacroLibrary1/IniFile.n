#pragma indent
using Nemerle
using Nemerle.Collections
using Nemerle.Compiler
using Nemerle.Compiler.Parsetree
using Nemerle.Compiler.Typedtree
using Nemerle.Text
using Nemerle.Utility
using System
using System.IO
using System.Collections.Generic
using System.Linq
using System.Text.RegularExpressions 

namespace MacroLibrary1
    macro IniFile(filePath: string)
        IniFileImpl.DoTransform(Macros.ImplicitCTX(), filePath)

    module Parser
        type Key = string
        type Value = string
        
        [Record]\
        public class Setting 
            Key: Key
            Value: Value
        
        type SectionName = string
        
        [Record]\
        public class Section 
            Name: SectionName
            Settings: list[Setting]
        
        public variant Stream
         | Stream    
               pos: int
               lines: list [string]
        
        comment (s: Stream): option[string * Stream]
            match (s)
             | Stream (n, line :: rest) =>
                 regexp match (line)
                  | @"^\s*;.*" => Some(line, Stream.Stream(n, rest))
                  | _ => None()
             | _ => None()
        
        header (s: Stream): option[string * Stream]
            match (s)
             | Stream (n, line :: rest) =>
                 regexp match (line)
                  | @"\[\s*(?<name>\S+)\s*\]" => Some(name, Stream.Stream(n, rest))
                  | _ => None()
             | _ => None()
        
        setting (s: Stream): option[Setting * Stream]
            match (s)
             | Stream (n, line :: rest) =>
                regexp match (line)
                 | @"\s*(?<key>\S+)\s*=\s*(?<value>[^;]*)" => Some (Setting(key, value), Stream.Stream(n, rest))
                 | _ => None()
             | _ => None()
        
        settings (s: Stream): option[list[Setting] * Stream]
            def loop (s, settings)
                match (setting(s))
                 | Some ((setting, s)) => loop (s, setting :: settings)
                 | None =>
                    match (comment(s))
                     | Some ((_, s)) => loop (s, settings)
                     | None => (settings.Reverse(), s)
            def (settings, s) = loop (s, [])
            Some (settings, s)
        
        section (s: Stream): option[Section * Stream]
            match (header(s))
             | Some ((name, s)) =>
                match (settings(s))
                 | Some ((settings, s)) => Some (Section (name, settings), s)
                 | _ => None()
             | _ => None()
        
        sections (s: Stream): option[list[Section] * Stream]
            def loop (s, sections)
                match (section(s))
                 | Some ((section, s)) => loop (s, section :: sections)
                 | None => 
                    match (comment(s))
                     | Some ((_, s)) => loop(s, sections)
                     | _ => (sections.Reverse(), s)
            def (sections, s) = loop (s, [])
            Some (sections, s)
        
        streamOfLines (lines: Seq[string]): Stream
            Stream.Stream (0, lines.Filter(x => !String.IsNullOrWhiteSpace(x)))
        
        streamOfFile (path: string): Stream
            streamOfLines(File.ReadLines(path))
            
        public parse(path: string): option[list[Section]]
            match (sections(streamOfFile(path)))
             | Some ((sections, _)) => Some(sections)
             | None => None()
    
    module IniFileImpl
        public DoTransform(typer: Typer, filePath: string) : PExpr
            Macros.DefineCTX(typer)
            def sections = 
                match (Parser.parse(filePath))
                 | Some(sections) => sections.Map(x => PExpr.Const(x))
                 | None => []
            <[ list[..$sections] ]>
